#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<fcntl.h>
#include<ctype.h>
#include<sys/wait.h>
#define MAXSIZE 1024

char command[MAXSIZE];

int Gitcommand()
{
  memset(command,0,sizeof(command));
  printf("[my minishall]$ ");
  fflush(stdout);
  if (fgets(command,MAXSIZE-1,stdin)==NULL)
 {
    printf("fgets error");
    return -1;
 }
  return 0;
}
//ls -a -l
int dealcommand(char *command)
{
  if(*command=='\0')
  {
    printf("command NULL error");
    return -1;
  }
  int argc=0;
  char *argv[MAXSIZE]={0};
  while(*command)
  {
    if(!isspace(*command))
    {
      argv[argc]=command;
      argc++;
    
      while(!isspace(*command)&& *command!='\0')
      {
        command++;
      }
    }
    *command='\0';
    command++;
  }
  argv[argc]=NULL;
  execcommand(argv);
  return 0;
}
int execcommand(char *argv[])
{
  if(argv[0]==NULL)
  {
    printf("exec error");
    return -1;
  }
  pid_t pid=fork();
  if(pid<0) 
  {
    perror("fork error");
    return -1;
  }
  else if(pid==0)
  {
    execvp(argv[0],argv);//子进程程序替换
  }
  else 
  {
    waitpid(pid,NULL,0);//父进程 等待，防止子进程僵尸进程
  }
  return 0;
}
int main()
{
  while(1)
  {
    if(Gitcommand()==-1)
    {
      continue;//继续获取命令
    }
    //获取完成后处理命令
    dealcommand(command);
  }
  return 0;
}
